/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PaqueteCliente;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Guillermo Veintemilla Clase Cliente que es la interfaz del cliente
 * que se conecta al servidor
 */
public class Cliente extends javax.swing.JFrame {

    String host;
    String usuario;
    String contraseña;
    String ruta;
    public static final String repositorioCliente = "Repositorio\\Cliente\\";
    static final int buffer = 4096;

    /**
     * Creates new form Cliente
     */
    public Cliente(String h, String u, String c) {
        this.host = h;
        this.usuario = u;
        this.contraseña = c;
        this.ruta = "ftp://" + usuario + ":" + contraseña + "@" + host + "/";
        initComponents();
        jTextField1.setText(host);
        jTextField2.setText(usuario);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        arbolServidor = new javax.swing.JTree();
        lblConexion = new javax.swing.JLabel();
        botonDescargar = new javax.swing.JButton();
        botonSubir = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        arbolCliente = new javax.swing.JTree();
        lblServidor = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        lblPuerto = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        botonListServidor = new javax.swing.JButton();
        botonListCliente = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cliente-Servidor");
        setResizable(false);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        arbolServidor.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(arbolServidor);

        lblConexion.setToolTipText("");

        botonDescargar.setText("Descargar---->");
        botonDescargar.setToolTipText("");
        botonDescargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDescargarActionPerformed(evt);
            }
        });

        botonSubir.setText("<---Subir");
        botonSubir.setToolTipText("");
        botonSubir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSubirActionPerformed(evt);
            }
        });

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        arbolCliente.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(arbolCliente);

        lblServidor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblServidor.setForeground(new java.awt.Color(255, 51, 51));
        lblServidor.setText("Host");

        jTextField1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(51, 255, 51));
        jTextField1.setEnabled(false);

        lblPuerto.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblPuerto.setForeground(new java.awt.Color(255, 51, 51));
        lblPuerto.setText("Usuario");

        jTextField2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(51, 255, 51));
        jTextField2.setEnabled(false);

        botonListServidor.setText("Listar servidor");
        botonListServidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonListServidorActionPerformed(evt);
            }
        });

        botonListCliente.setText("Listar cliente");
        botonListCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonListClienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblPuerto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botonListServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonListCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblConexion, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(botonDescargar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonSubir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblServidor)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPuerto)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonListServidor)
                            .addComponent(botonListCliente))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(botonDescargar)
                        .addGap(31, 31, 31)
                        .addComponent(botonSubir)
                        .addGap(146, 146, 146)
                        .addComponent(lblConexion, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Boton para descargar un archivo del servidor al cliente
     *
     * @param evt
     */
    private void botonDescargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDescargarActionPerformed
        Thread thread1 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {

                    String f = String.valueOf(arbolServidor.getSelectionPath().getPath()[1]);
                    URL url = new URL(ruta + f);

                    URLConnection conn = url.openConnection();
                    InputStream inputStream = conn.getInputStream();
                    FileOutputStream outputStream = new FileOutputStream(repositorioCliente + f);

                    byte[] buf = new byte[buffer];
                    int bytesRead = -1;
                    while ((bytesRead = inputStream.read(buf)) != -1) {
                        outputStream.write(buf, 0, bytesRead);
                    }

                    outputStream.close();
                    inputStream.close();
                    listarCliente();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Error de conexión con el servidor", "Error", JOptionPane.ERROR_MESSAGE);
                } catch (NullPointerException npe) {
                    JOptionPane.showMessageDialog(null, "Selecciona que quieres descargar", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        thread1.start();
    }//GEN-LAST:event_botonDescargarActionPerformed

    /**
     * Boton para subir archivos del cliente al servidor
     *
     * @param evt
     */
    private void botonSubirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSubirActionPerformed
        try {
            Object[] pathOrigen = arbolCliente.getSelectionPath().getPath();
            String rutaOrigen = "";
            for (int i = 0; i < pathOrigen.length; i++) {
                if (i == 0) {
                    rutaOrigen = rutaOrigen.concat("Repositorio\\Cliente\\");
                } else if (i != pathOrigen.length - 1) {
                    rutaOrigen = rutaOrigen.concat(String.valueOf(pathOrigen[i]) + "\\");
                } else {
                    rutaOrigen = rutaOrigen.concat(String.valueOf(pathOrigen[i]));
                }
            }
            File archivo = new File(rutaOrigen);
            subirArchivo(archivo);
        } catch (NullPointerException npe) {
            JOptionPane.showMessageDialog(this, "Selecciona que quieres subir", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botonSubirActionPerformed

    /**
     * Boton para sacar la lista del servidor
     *
     * @param evt
     */
    private void botonListServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonListServidorActionPerformed
        listarServidor();
    }//GEN-LAST:event_botonListServidorActionPerformed

    /**
     * Boton para sacar la lista del cliente
     *
     * @param evt
     */
    private void botonListClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonListClienteActionPerformed
        listarCliente();
    }//GEN-LAST:event_botonListClienteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree arbolCliente;
    private javax.swing.JTree arbolServidor;
    private javax.swing.JButton botonDescargar;
    private javax.swing.JButton botonListCliente;
    private javax.swing.JButton botonListServidor;
    private javax.swing.JButton botonSubir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel lblConexion;
    private javax.swing.JLabel lblPuerto;
    private javax.swing.JLabel lblServidor;
    // End of variables declaration//GEN-END:variables
     /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Cliente c = new Cliente("speedtest.tele2.net", "anonymous", "guillermo");
            }
        });
    }

    /**
     * Metodo para listar los archivos del cliente
     */
    public void listarCliente() {
        File[] archivos;

        File carpetaCliente = new File(repositorioCliente);
        archivos = carpetaCliente.listFiles();

        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Cliente");
        DefaultTreeModel modelo = new DefaultTreeModel(nodo);
        crearArbol(modelo, nodo, archivos);
        arbolCliente.setModel(modelo);

    }

    /**
     * Método para listar los archivos del servidor
     */
    public void listarServidor() {
        ArrayList<File> archivos = new ArrayList<File>();
        try {
            URL url = new URL(ruta);
            URLConnection conn = url.openConnection();
            InputStream inputStream = conn.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));

            File carpetaCliente = new File(repositorioCliente);
            String line;
            while ((line = reader.readLine()) != null) {
                String[] s = line.split("2016 ");
                if (s.length > 1) {
                    File f = new File(s[1]);
                    archivos.add(f);
                }
            }
            DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Servidor");
            DefaultTreeModel modelo = new DefaultTreeModel(nodo);
            crearArbol(modelo, nodo, archivos);
            arbolServidor.setModel(modelo);
            inputStream.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error de conexión con el servidor", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * Metodo que crea el arbol de directorios
     *
     * @param modelo modelo del arbol
     * @param padre nodo padre
     * @param archivos lista de archivos a montar.
     */
    public void crearArbol(DefaultTreeModel modelo, DefaultMutableTreeNode padre, File[] archivos) {
        DefaultMutableTreeNode aux = null;
        if (archivos != null) {
            for (int i = 0; i < archivos.length; i++) {
                aux = new DefaultMutableTreeNode(archivos[i].getName());
                modelo.insertNodeInto(aux, padre, i);

                if (archivos[i].isDirectory()) {
                    File[] auxarchivos = archivos[i].listFiles();
                    crearArbol(modelo, aux, auxarchivos);
                }
            }
        }
    }

    public void crearArbol(DefaultTreeModel modelo, DefaultMutableTreeNode padre, ArrayList<File> archivos) {
        DefaultMutableTreeNode aux = null;
        if (archivos != null) {
            for (int i = 0; i < archivos.size(); i++) {
                aux = new DefaultMutableTreeNode(archivos.get(i).getName());
                modelo.insertNodeInto(aux, padre, i);
            }
        }
    }

    /**
     * Metodo que sube un archivo al servidor
     *
     * @param archivo archivo que se quiere subir
     * @param rutaDestino rutaaux donde se quiere subir
     */
    public void subirArchivo(File archivo) {

        Thread thread1 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    URL url = new URL(ruta + "upload/" + archivo.getName());
                    URLConnection conn = url.openConnection();
                    OutputStream outputStream = conn.getOutputStream();
                    FileInputStream inputStream = new FileInputStream(archivo);

                    byte[] buf = new byte[buffer];
                    int bytesRead = -1;
                    while ((bytesRead = inputStream.read(buf)) != -1) {
                        outputStream.write(buf, 0, bytesRead);
                    }

                    inputStream.close();
                    outputStream.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Error de conexión con el servidor", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        thread1.start();

    }
}
